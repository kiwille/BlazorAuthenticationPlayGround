@page "/fetchdata"
@attribute [Authorize]

@using System.Text.Json;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using System.Net.Http.Headers
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
  <p><em>Loading...</em></p>
}
else
{
  <table class="table">
      <thead> 
          <tr>
              <th>Date</th>
              <th>Temp. (C)</th>
              <th>Temp. (F)</th>
              <th>Summary</th>
          </tr>
      </thead>
      <tbody>
      @foreach (var forecast in forecasts)
      {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
      }
      </tbody>
  </table>
}

@code {
    [Inject]
    public IHttpClientFactory? httpClientFactory { get; set; }

    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        try
        {
                var httpClient = httpClientFactory.CreateClient("APIClient");
                //httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", "Your Oauth token");

                var request = new HttpRequestMessage(HttpMethod.Get, $"/weatherforecast");
                
                var response = await httpClient.SendAsync(request, HttpCompletionOption.ResponseHeadersRead).ConfigureAwait(false);

                using (var responseStream = await response.Content.ReadAsStreamAsync())
                {
                    forecasts = await JsonSerializer.DeserializeAsync<WeatherForecast[]>(responseStream);
                }
            //forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
            throw;
        }

    }

  public class WeatherForecast
  {
    public DateTime Date { get; set; }

    public int TemperatureC { get; set; }

    public string? Summary { get; set; }

    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
  }
}
